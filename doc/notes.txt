If you specify '<&=X', where X is a file descriptor number or a filehandle, then Perl will do an equivalent of C's fdopen of that file descriptor

my $fileno = 0;
open(my $stdin, "<&=$fileno");   # 2-argument form
open(my $stdin, "<&=", $fileno); # or use 3-argument form

If you prefer an object-oriented approach, you can use IO::File and the fdopen or new_from_fd methods (as Borodin pointed out):

use IO::File;
my $stdin = IO::File->new_from_fd($fileno, 'r');



But it is much more straightforward and more readable to use the fdopen method from IO::Handle.

It looks like this

my $fh = IO::File->new;
$fh->fdopen($fileno, 'r');

and note that IO::File (which subclasses IO::Handle) is loaded on demand with Perl 5 version 14 and later, so you don't need to use IO::File unless you have a very old Perl installation.

