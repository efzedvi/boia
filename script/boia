#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;
use Proc::PID::File;
use Proc::Daemon;
use Pod::Usage;
use IO::File;
use POSIX qw(strftime);

# For test and development purposes pass lib=../lib
BEGIN {
	if (scalar(@ARGV) && $ARGV[0] =~ /lib=/) {
		my $lib = shift @ARGV;
		$lib =~ s/lib=//;
		push @INC, $lib;
	}
};

use BOIA::Log;
use BOIA::Config;
use BOIA;

my $help_flag;
my $version_flag;
my $daemon_flag;
my $config_file = '/usr/local/etc/boia.conf';
my $dryrun_flag;
my $nozap_flag;
my $log_file;
my $cmd;

my $data   = "file.dat";
my $length = 24;
my $verbose;

my $res = GetOptions (	"help|?"	=> \$help_flag,
			"version|v"	=> \$version_flag,
			"daemon|d"	=> \$daemon_flag,
			"config|f=s"	=> \$config_file,
			"cmd|c=s"	=> \$cmd,
			"dryrun|t"	=> \$dryrun_flag,
			"nozap|n"	=> \$nozap_flag,
			"log|l=s"	=> \$log_file,
	);

my @cmds = qw/ scan parse reload list zap /;
my %cmds = map { $_ => 1; } @cmds;

pod2usage(1) unless $res;
pod2usage(0) if $help_flag;

if ($version_flag) {
	printf("BOIA v%s\n", $BOIA::VERSION);
	exit;
}

BOIA::Log->open({syslog => 1, stderr => 1});

if ($log_file) {
	my $logfd = IO::File->new(">>$log_file");
	if ($logfd) {
		$logfd->close();
		BOIA::Log->open({syslog => 1, file => $log_file});
	} else {
		BOIA::Log->write(LOG_ERR, "Cannot write to log file $config_file");
	}
}

if ($config_file && ! -r $config_file) {
	BOIA::Log->write(LOG_ERR, "Failed reading configuration file $config_file");
	exit(1);
}

if ($cmd && ! exists $cmds{lc $cmd}) {
	print STDERR "Invalid command '$cmd'\n";
	exit(5);
}

my $boia = BOIA->new($config_file);

if (!$boia) {
	BOIA::Log->write(LOG_ERR, "Error starting boia");
	exit(1);
}

my $work_dir = BOIA::Config->get('workdir');
my $result = BOIA::Config->parse();
if (!$result) {
	BOIA::Log->write(LOG_ERR, "Invalid config file");
	exit(1);
}
my $errors = $result->{errors};
for my $error (@$errors) {
	BOIA::Log->write(LOG_ERR, $error);
}
exit(1) if (scalar(@$errors));

exit(0) if $cmd eq 'parse'; # my job is done

$boia->nozap($nozap_flag);
$boia->dryrun($dryrun_flag);

if ($cmd) {
	if ($cmd eq 'scan') { #--- file scan
		$boia->scan_files();
	} elsif ($cmd eq 'reload') { #--- reloading the config files
		my $pidf = Proc::PID::File->new({ verify => 1});
		if (! open(PID, $pidf->{path}) ) {
			printf STDERR "Cannot open pid file %s : $!\n", $pidf->{path};
			exit(3);
		}
		my ($pid) = <PID> =~ /^(\d+)/;
		close PID;
		if ($pid) {
			printf STDERR "Sending HUP signal to pid: $pid\n";
			kill 'HUP', $pid;
		} else {
			print STDERR "No PID found\n";
		}
	} elsif ($cmd eq 'list') { #--- list IPs
		$boia->load_jail();
		my $jail_ips = $boia->list_jail();

		if (!scalar(@$jail_ips)) {
			print "No offending IP address found yet\n";
			exit(0);
		}

		printf("%-16s %-32s %5s  %-20s\n", 
			'IP Address', 'Log File', 'Count', 'Release Time');
		print '-' x 80 . "\n";

		for my $cell (@$jail_ips) {
			my ($ip, $section, $count, $release_time) = @$cell;
			my $release_date = strftime("%Y-%m-%d,%H:%M:%S", localtime($release_time));
			printf("%-16s %-32s %5d  %-20s\n", $ip, $section, $count, $release_date);
		}
		exit;

	} elsif ($cmd eq 'zap') { #--- zap jailed IPs
		$boia->load_jail();
		$boia->zap();
	} else {
		# technically we should never get here
		print STDERR "Invalid command '$cmd'\n";
		exit(5);
	}

	exit(0);
}

if (Proc::PID::File->running({ verify => 1 })) {
	BOIA::Log->write(LOG_ERR, 'Already running');
	exit(1);
}

my $pid;
if ($daemon_flag) {
	BOIA::Log->open({stderr => 0});
	Proc::Daemon::Init;

	$pid = Proc::PID::File->new();
	$pid->touch();
}

$SIG{INT} = \&bailout;
$SIG{HUP} = \&reconf;
$SIG{CHLD} = 'IGNORE';

#--- main loop
$boia->run(!$daemon_flag);
BOIA::Log->write(LOG_INFO, 'Terminated');
$pid->release() if $pid;


#--- signal handlers

sub reconf {
        $boia->read_config();
}

sub bailout {
        $boia->exit_loop();
}

__END__

=head1 NAME

boia - Block Offending IP Addresses

=head1 SYNOPSIS

boia [options] :

Where the options are:

-h/--help :  Prints a brief help message and exits.

-v/--version : Prints version info 

-d/--daemon : Become a daemon process

-f/--config <config_file> : Configuration file (default /etc/boia.conf)

-n/--nozap :  Do not run zapcmd when it first starts

-t/--dryrun : Only detects and reports bad IPs

-c/--cmd <command> : Possible commands are:

	scan :  Finds and adds bad IPs in non-daemon mode then exits

	parse : parses the config file

	reload : Signals the daemon to reread the config file

	list : Lists the offending IP addresses found so far

	zap : Removes/unlbocks all the bad IPs it has found

=cut

